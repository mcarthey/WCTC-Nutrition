// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Nutrition.Entities;
//
//    var usdaResponse = UsdaResponse.FromJson(jsonString);

namespace Nutrition.Entities
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class UsdaResponse
    {
        [JsonProperty("totalHits")]
        public virtual long TotalHits { get; set; }

        [JsonProperty("currentPage")]
        public virtual long CurrentPage { get; set; }

        [JsonProperty("totalPages")]
        public virtual long TotalPages { get; set; }

        [JsonProperty("pageList")]
        public virtual List<long> PageList { get; set; }

        [JsonProperty("foodSearchCriteria")]
        public virtual FoodSearchCriteria FoodSearchCriteria { get; set; }

        [JsonProperty("foods")]
        public virtual List<Food> Foods { get; set; }

        [JsonProperty("aggregations")]
        public virtual Aggregations Aggregations { get; set; }
    }

    public partial class Aggregations
    {
        [JsonProperty("dataType")]
        public virtual DataTypeClass DataType { get; set; }

        [JsonProperty("nutrients")]
        public virtual Nutrients Nutrients { get; set; }
    }

    public partial class DataTypeClass
    {
        [JsonProperty("Branded")]
        public virtual long Branded { get; set; }

        [JsonProperty("SR Legacy")]
        public virtual long SrLegacy { get; set; }

        [JsonProperty("Survey (FNDDS)")]
        public virtual long SurveyFndds { get; set; }
    }

    public partial class Nutrients
    {
    }

    public partial class FoodSearchCriteria
    {
        [JsonProperty("query")]
        public virtual string Query { get; set; }

        [JsonProperty("generalSearchInput")]
        public virtual string GeneralSearchInput { get; set; }

        [JsonProperty("pageNumber")]
        public virtual long PageNumber { get; set; }

        [JsonProperty("numberOfResultsPerPage")]
        public virtual long NumberOfResultsPerPage { get; set; }

        [JsonProperty("pageSize")]
        public virtual long PageSize { get; set; }

        [JsonProperty("requireAllWords")]
        public virtual bool RequireAllWords { get; set; }
    }

    public partial class Food
    {
        [JsonProperty("fdcId")]
        public virtual long FdcId { get; set; }

        [JsonProperty("description")]
        public virtual string Description { get; set; }

        [JsonProperty("commonNames", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string CommonNames { get; set; }

        [JsonProperty("additionalDescriptions", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string AdditionalDescriptions { get; set; }

        [JsonProperty("dataType")]
        public virtual DataTypeEnum DataType { get; set; }

        [JsonProperty("foodCode", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? FoodCode { get; set; }

        [JsonProperty("publishedDate")]
        public virtual DateTimeOffset PublishedDate { get; set; }

        [JsonProperty("foodCategory")]
        public virtual string FoodCategory { get; set; }

        [JsonProperty("foodCategoryId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? FoodCategoryId { get; set; }

        [JsonProperty("allHighlightFields")]
        public virtual string AllHighlightFields { get; set; }

        [JsonProperty("score")]
        public virtual double Score { get; set; }

        [JsonProperty("microbes")]
        public virtual List<object> Microbes { get; set; }

        [JsonProperty("foodNutrients")]
        public virtual List<FoodNutrient> FoodNutrients { get; set; }

        [JsonProperty("finalFoodInputFoods")]
        public virtual List<FinalFoodInputFood> FinalFoodInputFoods { get; set; }

        [JsonProperty("foodMeasures")]
        public virtual List<FoodMeasure> FoodMeasures { get; set; }

        [JsonProperty("foodAttributes")]
        public virtual List<object> FoodAttributes { get; set; }

        [JsonProperty("foodAttributeTypes")]
        public virtual List<FoodAttributeType> FoodAttributeTypes { get; set; }

        [JsonProperty("foodVersionIds")]
        public virtual List<object> FoodVersionIds { get; set; }

        [JsonProperty("ndbNumber", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? NdbNumber { get; set; }

        [JsonProperty("scientificName", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ScientificName { get; set; }

        [JsonProperty("gtinUpc", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string GtinUpc { get; set; }

        [JsonProperty("brandOwner", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string BrandOwner { get; set; }

        [JsonProperty("brandName", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string BrandName { get; set; }

        [JsonProperty("ingredients", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Ingredients { get; set; }

        [JsonProperty("marketCountry", NullValueHandling = NullValueHandling.Ignore)]
        public virtual MarketCountry? MarketCountry { get; set; }

        [JsonProperty("modifiedDate", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DateTimeOffset? ModifiedDate { get; set; }

        [JsonProperty("dataSource", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DataSource? DataSource { get; set; }

        [JsonProperty("packageWeight", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string PackageWeight { get; set; }

        [JsonProperty("servingSizeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ServingSizeUnit { get; set; }

        [JsonProperty("servingSize", NullValueHandling = NullValueHandling.Ignore)]
        public virtual double? ServingSize { get; set; }

        [JsonProperty("tradeChannels", NullValueHandling = NullValueHandling.Ignore)]
        public virtual List<TradeChannel> TradeChannels { get; set; }

        [JsonProperty("householdServingFullText", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string HouseholdServingFullText { get; set; }

        [JsonProperty("shortDescription", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ShortDescription { get; set; }

        [JsonProperty("subbrandName", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SubbrandName { get; set; }
    }

    public partial class FinalFoodInputFood
    {
        [JsonProperty("foodDescription")]
        public virtual string FoodDescription { get; set; }

        [JsonProperty("gramWeight")]
        public virtual long GramWeight { get; set; }

        [JsonProperty("id")]
        public virtual long Id { get; set; }

        [JsonProperty("portionCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public virtual long PortionCode { get; set; }

        [JsonProperty("portionDescription")]
        public virtual string PortionDescription { get; set; }

        [JsonProperty("unit")]
        public virtual string Unit { get; set; }

        [JsonProperty("rank")]
        public virtual long Rank { get; set; }

        [JsonProperty("srCode")]
        public virtual long SrCode { get; set; }

        [JsonProperty("value")]
        public virtual long Value { get; set; }
    }

    public partial class FoodAttributeType
    {
        [JsonProperty("name")]
        public virtual string Name { get; set; }

        [JsonProperty("description")]
        public virtual string Description { get; set; }

        [JsonProperty("id")]
        public virtual long Id { get; set; }

        [JsonProperty("foodAttributes")]
        public virtual List<FoodAttribute> FoodAttributes { get; set; }
    }

    public partial class FoodAttribute
    {
        [JsonProperty("value")]
        public virtual string Value { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Name { get; set; }

        [JsonProperty("id")]
        public virtual long Id { get; set; }
    }

    public partial class FoodMeasure
    {
        [JsonProperty("disseminationText")]
        public virtual string DisseminationText { get; set; }

        [JsonProperty("gramWeight")]
        public virtual long GramWeight { get; set; }

        [JsonProperty("id")]
        public virtual long Id { get; set; }

        [JsonProperty("modifier")]
        [JsonConverter(typeof(ParseStringConverter))]
        public virtual long Modifier { get; set; }

        [JsonProperty("rank")]
        public virtual long Rank { get; set; }

        [JsonProperty("measureUnitAbbreviation")]
        public virtual string MeasureUnitAbbreviation { get; set; }

        [JsonProperty("measureUnitName")]
        public virtual string MeasureUnitName { get; set; }

        [JsonProperty("measureUnitId")]
        public virtual long MeasureUnitId { get; set; }
    }

    public partial class FoodNutrient
    {
        [JsonProperty("nutrientId")]
        public virtual long NutrientId { get; set; }

        [JsonProperty("nutrientName")]
        public virtual string NutrientName { get; set; }

        [JsonProperty("nutrientNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public virtual long NutrientNumber { get; set; }

        [JsonProperty("unitName")]
        public virtual UnitName UnitName { get; set; }

        [JsonProperty("value")]
        public virtual double Value { get; set; }

        [JsonProperty("rank")]
        public virtual long Rank { get; set; }

        [JsonProperty("indentLevel")]
        public virtual long IndentLevel { get; set; }

        [JsonProperty("foodNutrientId")]
        public virtual long FoodNutrientId { get; set; }

        [JsonProperty("dataPoints", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? DataPoints { get; set; }

        [JsonProperty("derivationCode", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DerivationCode? DerivationCode { get; set; }

        [JsonProperty("derivationDescription", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string DerivationDescription { get; set; }

        [JsonProperty("derivationId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? DerivationId { get; set; }

        [JsonProperty("foodNutrientSourceId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? FoodNutrientSourceId { get; set; }

        [JsonProperty("foodNutrientSourceCode", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public virtual long? FoodNutrientSourceCode { get; set; }

        [JsonProperty("foodNutrientSourceDescription", NullValueHandling = NullValueHandling.Ignore)]
        public virtual FoodNutrientSourceDescription? FoodNutrientSourceDescription { get; set; }

        [JsonProperty("min", NullValueHandling = NullValueHandling.Ignore)]
        public virtual double? Min { get; set; }

        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public virtual double? Max { get; set; }

        [JsonProperty("percentDailyValue", NullValueHandling = NullValueHandling.Ignore)]
        public virtual double? PercentDailyValue { get; set; }
    }

    public enum DataSource { Li };

    public enum DataTypeEnum { Branded, SrLegacy, SurveyFndds };

    public enum DerivationCode { A, Bfzn, Cazn, Lccd, Lccs, Lcsl, Nc, Z };

    public enum FoodNutrientSourceDescription { AnalyticalOrDerivedFromAnalytical, AssumedZero, CalculatedOrImputed, ManufacturerSAnalyticalPartialDocumentation };

    public enum UnitName { G, Iu, KJ, Kcal, Mg, Ug };

    public enum MarketCountry { UnitedStates };

    public enum TradeChannel { NoTradeChannel };

    public partial class UsdaResponse
    {
        public static UsdaResponse FromJson(string json) => JsonConvert.DeserializeObject<UsdaResponse>(json, Nutrition.Entities.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this UsdaResponse self) => JsonConvert.SerializeObject(self, Nutrition.Entities.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DataSourceConverter.Singleton,
                DataTypeEnumConverter.Singleton,
                DerivationCodeConverter.Singleton,
                FoodNutrientSourceDescriptionConverter.Singleton,
                UnitNameConverter.Singleton,
                MarketCountryConverter.Singleton,
                TradeChannelConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DataSourceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DataSource) || t == typeof(DataSource?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "LI")
            {
                return DataSource.Li;
            }
            throw new Exception("Cannot unmarshal type DataSource");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DataSource)untypedValue;
            if (value == DataSource.Li)
            {
                serializer.Serialize(writer, "LI");
                return;
            }
            throw new Exception("Cannot marshal type DataSource");
        }

        public static readonly DataSourceConverter Singleton = new DataSourceConverter();
    }

    internal class DataTypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DataTypeEnum) || t == typeof(DataTypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Branded":
                    return DataTypeEnum.Branded;
                case "SR Legacy":
                    return DataTypeEnum.SrLegacy;
                case "Survey (FNDDS)":
                    return DataTypeEnum.SurveyFndds;
            }
            throw new Exception("Cannot unmarshal type DataTypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DataTypeEnum)untypedValue;
            switch (value)
            {
                case DataTypeEnum.Branded:
                    serializer.Serialize(writer, "Branded");
                    return;
                case DataTypeEnum.SrLegacy:
                    serializer.Serialize(writer, "SR Legacy");
                    return;
                case DataTypeEnum.SurveyFndds:
                    serializer.Serialize(writer, "Survey (FNDDS)");
                    return;
            }
            throw new Exception("Cannot marshal type DataTypeEnum");
        }

        public static readonly DataTypeEnumConverter Singleton = new DataTypeEnumConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class DerivationCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DerivationCode) || t == typeof(DerivationCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "A":
                    return DerivationCode.A;
                case "BFZN":
                    return DerivationCode.Bfzn;
                case "CAZN":
                    return DerivationCode.Cazn;
                case "LCCD":
                    return DerivationCode.Lccd;
                case "LCCS":
                    return DerivationCode.Lccs;
                case "LCSL":
                    return DerivationCode.Lcsl;
                case "NC":
                    return DerivationCode.Nc;
                case "Z":
                    return DerivationCode.Z;
            }
            throw new Exception("Cannot unmarshal type DerivationCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DerivationCode)untypedValue;
            switch (value)
            {
                case DerivationCode.A:
                    serializer.Serialize(writer, "A");
                    return;
                case DerivationCode.Bfzn:
                    serializer.Serialize(writer, "BFZN");
                    return;
                case DerivationCode.Cazn:
                    serializer.Serialize(writer, "CAZN");
                    return;
                case DerivationCode.Lccd:
                    serializer.Serialize(writer, "LCCD");
                    return;
                case DerivationCode.Lccs:
                    serializer.Serialize(writer, "LCCS");
                    return;
                case DerivationCode.Lcsl:
                    serializer.Serialize(writer, "LCSL");
                    return;
                case DerivationCode.Nc:
                    serializer.Serialize(writer, "NC");
                    return;
                case DerivationCode.Z:
                    serializer.Serialize(writer, "Z");
                    return;
            }
            throw new Exception("Cannot marshal type DerivationCode");
        }

        public static readonly DerivationCodeConverter Singleton = new DerivationCodeConverter();
    }

    internal class FoodNutrientSourceDescriptionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FoodNutrientSourceDescription) || t == typeof(FoodNutrientSourceDescription?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Analytical or derived from analytical":
                    return FoodNutrientSourceDescription.AnalyticalOrDerivedFromAnalytical;
                case "Assumed zero":
                    return FoodNutrientSourceDescription.AssumedZero;
                case "Calculated or imputed":
                    return FoodNutrientSourceDescription.CalculatedOrImputed;
                case "Manufacturer's analytical; partial documentation":
                    return FoodNutrientSourceDescription.ManufacturerSAnalyticalPartialDocumentation;
            }
            throw new Exception("Cannot unmarshal type FoodNutrientSourceDescription");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FoodNutrientSourceDescription)untypedValue;
            switch (value)
            {
                case FoodNutrientSourceDescription.AnalyticalOrDerivedFromAnalytical:
                    serializer.Serialize(writer, "Analytical or derived from analytical");
                    return;
                case FoodNutrientSourceDescription.AssumedZero:
                    serializer.Serialize(writer, "Assumed zero");
                    return;
                case FoodNutrientSourceDescription.CalculatedOrImputed:
                    serializer.Serialize(writer, "Calculated or imputed");
                    return;
                case FoodNutrientSourceDescription.ManufacturerSAnalyticalPartialDocumentation:
                    serializer.Serialize(writer, "Manufacturer's analytical; partial documentation");
                    return;
            }
            throw new Exception("Cannot marshal type FoodNutrientSourceDescription");
        }

        public static readonly FoodNutrientSourceDescriptionConverter Singleton = new FoodNutrientSourceDescriptionConverter();
    }

    internal class UnitNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(UnitName) || t == typeof(UnitName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "G":
                    return UnitName.G;
                case "IU":
                    return UnitName.Iu;
                case "KCAL":
                    return UnitName.Kcal;
                case "MG":
                    return UnitName.Mg;
                case "UG":
                    return UnitName.Ug;
                case "kJ":
                    return UnitName.KJ;
            }
            throw new Exception("Cannot unmarshal type UnitName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (UnitName)untypedValue;
            switch (value)
            {
                case UnitName.G:
                    serializer.Serialize(writer, "G");
                    return;
                case UnitName.Iu:
                    serializer.Serialize(writer, "IU");
                    return;
                case UnitName.Kcal:
                    serializer.Serialize(writer, "KCAL");
                    return;
                case UnitName.Mg:
                    serializer.Serialize(writer, "MG");
                    return;
                case UnitName.Ug:
                    serializer.Serialize(writer, "UG");
                    return;
                case UnitName.KJ:
                    serializer.Serialize(writer, "kJ");
                    return;
            }
            throw new Exception("Cannot marshal type UnitName");
        }

        public static readonly UnitNameConverter Singleton = new UnitNameConverter();
    }

    internal class MarketCountryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MarketCountry) || t == typeof(MarketCountry?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "United States")
            {
                return MarketCountry.UnitedStates;
            }
            throw new Exception("Cannot unmarshal type MarketCountry");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MarketCountry)untypedValue;
            if (value == MarketCountry.UnitedStates)
            {
                serializer.Serialize(writer, "United States");
                return;
            }
            throw new Exception("Cannot marshal type MarketCountry");
        }

        public static readonly MarketCountryConverter Singleton = new MarketCountryConverter();
    }

    internal class TradeChannelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TradeChannel) || t == typeof(TradeChannel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "NO_TRADE_CHANNEL")
            {
                return TradeChannel.NoTradeChannel;
            }
            throw new Exception("Cannot unmarshal type TradeChannel");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TradeChannel)untypedValue;
            if (value == TradeChannel.NoTradeChannel)
            {
                serializer.Serialize(writer, "NO_TRADE_CHANNEL");
                return;
            }
            throw new Exception("Cannot marshal type TradeChannel");
        }

        public static readonly TradeChannelConverter Singleton = new TradeChannelConverter();
    }
}
